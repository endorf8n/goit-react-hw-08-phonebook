{"version":3,"file":"static/js/53.cf108317.chunk.js","mappings":"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","sources":["components/ContactForm/contactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/contactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/contactListstyled.js","components/ContactList/ContactList.jsx","components/Filter/filter.styled.js","components/Filter/Filter.jsx","pages/pagesStyles/contacts.styled.js","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: ${({ theme }) => theme.spacing(100)};\n  border-color: ${({ theme }) => theme.colors.dark};\n  border-radius: ${({ theme }) => theme.spacing(2)};\n  background-color: ${({ theme }) => theme.colors.light};\n  text-align: center;\n  margin: 0 auto;\n`;\n\nexport const ContactFormLabel = styled.label`\n  margin-bottom: ${({ theme }) => theme.spacing(6)};\n  color: ${({ theme }) => theme.colors.gray};\n  font-size: 16px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  font-size: ${({ theme }) => theme.fontSizes.smallest};\n  width: 100%;\n  height: ${({ theme }) => theme.spacing(8)};\n  border-radius: ${({ theme }) => theme.spacing(1)};\n  border: 1px solid #a0a9ba;\n  outline: 2px solid transparent;\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.blue};\n    box-shadow: 0 0 0 2px rgba(137, 207, 240, 0.9);\n  }\n`;\n\nexport const AddContactBtn = styled.button`\n  display: block;\n  font-size: ${({ theme }) => theme.fontSizes.smallest};\n  width: ${({ theme }) => theme.spacing(60)};\n  margin: 0 auto;\n  height: ${({ theme }) => theme.spacing(8)};\n  border-radius: ${({ theme }) => theme.spacing(1)};\n  border-color: transparent;\n  background-color: ${({ theme }) => theme.colors.dark};\n  color: ${({ theme }) => theme.colors.white};\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.blue};\n    color: ${({ theme }) => theme.colors.violet};\n  }\n`;\n","import { useState } from 'react';\nimport {\n  AddContactBtn,\n  ContactFormLabel,\n  Form,\n  Input,\n} from './contactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContatcs } from 'redux/selectors';\nimport { addContactThunk } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContatcs);\n  const dispatch = useDispatch();\n\n  const handleChangeValue = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isExist = contacts.find(\n      elem => elem.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isExist) {\n      alert(`\"${name}\" is already in contacts!`);\n      return;\n    }\n\n    dispatch(addContactThunk({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <ContactFormLabel>\n        Name\n        <Input\n          value={name}\n          onChange={handleChangeValue}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^([ \\u00c0-\\u01ffa-zA-Z'\\-])+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"Enter a name\"\n          required\n        />\n      </ContactFormLabel>\n      <ContactFormLabel>\n        Phone\n        <Input\n          value={number}\n          onChange={handleChangeValue}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"Enter a phone number\"\n          required\n        />\n      </ContactFormLabel>\n\n      <AddContactBtn type=\"submit\">Add contact</AddContactBtn>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItemStyled = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: ${({ theme }) => theme.fontSizes.presmall};\n`;\n\nexport const DeleteBtnStyled = styled.button`\n  width: ${({ theme }) => theme.spacing(20)};\n  font-size: ${({ theme }) => theme.fontSizes.smallest};\n  background-color: ${({ theme }) => theme.colors.lightRed};\n  border-color: transparent;\n  border-radius: ${({ theme }) => theme.spacing(1)};\n  &:hover,\n  &:focus {\n    background-color: ${({ theme }) => theme.colors.red};\n    color: ${({ theme }) => theme.colors.light};\n    box-shadow: ${({ theme }) => theme.shadows.small};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItemStyled, DeleteBtnStyled } from './contactListItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/operations';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <ContactItemStyled>\n      - {name}: {number}\n      <DeleteBtnStyled\n        type=\"button\"\n        onClick={() => dispatch(deleteContactThunk(id))}\n      >\n        Delete\n      </DeleteBtnStyled>\n    </ContactItemStyled>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing(2)};\n  width: ${({ theme }) => theme.spacing(116)};\n  padding: ${({ theme }) => theme.spacing(4)};\n`;\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { ListStyled } from './contactListstyled';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ListStyled>\n      {filteredContacts\n        .map(contact => {\n          return <ContactListItem {...contact} key={contact.id} />;\n        })\n        .reverse()}\n    </ListStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterTitle = styled.label`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  font-size: ${({ theme }) => theme.fontSizes.presmall};\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  margin: 0 auto;\n  width: ${({ theme }) => theme.spacing(60)};\n  height: ${({ theme }) => theme.spacing(7)};\n  border-radius: ${({ theme }) => theme.spacing(1)};\n  border: 1px solid #a0a9ba;\n  outline: 2px solid transparent;\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.blue};\n    box-shadow: 0 0 0 2px rgba(137, 207, 240, 0.9);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { FilterInput, FilterTitle } from './filter.styled';\nimport { addFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterTitle>\n      Find contacts by name:\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter here\"\n        onChange={e => dispatch(addFilter(e.target.value))}\n      />\n    </FilterTitle>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: ${({ theme }) => theme.spacing(10)};\n  width: ${({ theme }) => theme.spacing(120)};\n  margin: 0 auto;\n  box-shadow: ${({ theme }) => theme.shadows.regular};\n  border-radius: ${({ theme }) => theme.spacing(2)};\n  background-color: ${({ theme }) => theme.colors.light};\n`;\n\nexport const Title = styled.h1`\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  color: ${({ theme }) => theme.colors.violet};\n  text-align: center;\n  margin-bottom: ${({ theme }) => theme.spacing(4)};\n`;\n\nexport const TitleContacts = styled.h2`\n  padding-top: ${({ theme }) => theme.spacing(3)};\n  font-size: ${({ theme }) => theme.fontSizes.medium};\n  color: ${({ theme }) => theme.colors.violet};\n  text-align: center;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Title,\n  TitleContacts,\n  Wrapper,\n} from 'pages/pagesStyles/contacts.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsThunk } from 'redux/contacts/operations';\nimport {\n  selectContatcs,\n  selectError,\n  selectIsLoading,\n  selectUser,\n} from 'redux/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContatcs);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const user = useSelector(selectUser);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const countTotalContacts = () => {\n    return contacts.length;\n  };\n\n  const total = countTotalContacts();\n\n  return (\n    <Wrapper>\n      <Title>{user.name}'s Phonebook</Title>\n      <ContactForm />\n      <TitleContacts>Contacts</TitleContacts>\n\n      {total === 0 ? (\n        'There is no contacts in your phonebook!'\n      ) : (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n      {isLoading && !error && <Loader />}\n    </Wrapper>\n  );\n};\n\nexport default Contacts;\n"],"names":["Form","styled","theme","spacing","colors","dark","light","ContactFormLabel","gray","Input","fontSizes","smallest","blue","AddContactBtn","white","violet","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","selectContatcs","dispatch","useDispatch","handleChangeValue","e","target","value","onSubmit","preventDefault","find","elem","toLowerCase","alert","addContactThunk","onChange","type","pattern","title","placeholder","required","ContactItemStyled","presmall","DeleteBtnStyled","lightRed","red","shadows","small","ContactListItem","id","onClick","deleteContactThunk","ListStyled","ContactList","filteredContacts","selectFilteredContacts","map","contact","key","reverse","FilterTitle","FilterInput","Filter","addFilter","Wrapper","regular","Title","medium","TitleContacts","isLoading","selectIsLoading","error","selectError","user","selectUser","useEffect","getContactsThunk","total","length","Loader"],"sourceRoot":""}